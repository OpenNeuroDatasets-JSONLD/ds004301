This file contains both scripts used to preprocess and analyze the BIDS-formatted data and scripts used to collect the origin data. The following list summarizes the scripts from the code/ directory used to collect and process the data with brief descriptions:

1. The data_processing/ directory contains the fmriprep/ dictionary and result/ dictionary. 
	The fmriprep/ dictionary consists of 8 scripts that were used to run fMRIPrep on BIDS-formatted data.
	The result/ dictionary consists of log files from sub01 to sub11.
	The html/ dictionary consists of html reports that fmriprep generates when it is run.

2. The stimuli_presentation_code_sub01-sub05/ and stimuli_presentation_code_sub06-sub11/ dictionaries contain several example stimulus presentation scripts. 
	The gen_order_chn.m generates the stimulus playback sequence for each run for each subject and the generated files saved in chn_data/ folder. 
	The complang_chn.m is the program showing the stimuli, which can load the play order for each run generated by gen_order_chn.m. 
	The run_chn_sub.m is a script that can batch execute complang_chn.m multiple times.

3. The technical validation/ dictionary contains several scripts that were used to do the technical validation of the fMRI data. 
	The get_fwhm.py was used to estimate intrinsic smoothness using AFNIâ€™s 3dFWHMx for each subject, which needs mask and bold images as inputs. 
	The get_fd.py was utilized to estimate framewise displacement for each subject. To use the script, you should first extract the data including the head motion from the confounds file that uploaded to openneuro.
	The get_isc.py was used to run whole-brain vertex-wise leave-one-out inter-subject correlation (ISC) analysis on smoothed surface data across all subjects. 
	The get_tSNR.py was employed to compute mean temporal SNR (tSNR) across all scans.
	The neural_decoding.py and evaluate.py were used to learn a mapping and calculates a correlation between patterns of brain activation and semantic vectors. The neural_decoding.py can be utilized to generate the predict values. To use this script, the general linear model (GLM) was first applied to obtain the brain response to each paradigm by combining the stimulus repetitions, and then the t-value images for each paradigm were generated to be the input. In addition, the evaluate.py can be utilized to calculate the accuracy of the pairwise classification between the predict values generated by neural_decoding.py and the real values.
	The get_icc.py was utilized to estimate the variability within a group to the variability across groups, and the raw feature rating data was used as inputs.